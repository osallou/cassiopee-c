{"name":"Cassiopee-c","tagline":"Cassiopee index and search library C implementation","body":"cassiopee-c\r\n===========\r\n\r\nCassiopee is an index and search tool and library for bioinformatics (could be used for others but provides additional stuff usefull in sequence analysis).\r\nIt is a complete rewrite of the ruby Cassiopee gem.\r\nIt scan an input genomic sequence (dna/rna/protein) and search for a\r\nsubsequence with exact match or allowing substitutions (Hamming distance)\r\nand/or insertion/deletions. It also support alphabet ambiguity.\r\n\r\nThis program provides both a binary (Cassiopee) and a shared library.\r\n\r\nIndex is based on a suffix tree with compression. It is possible to save the\r\nindexed sequence for later use without the need to reindex the whole sequence\r\n(for large data sets).\r\n\r\nSee cassiopee -h for all options.\r\n\r\nExpected input sequence is a one-line sequence with no header. cassiopeeknife  (see later chapter) can be used to convert Fasta sequences in cassiopee input sequences.\r\n\r\nPackages\r\n========\r\n\r\nApplication is packaged for several distribution.\r\nIt is available in official Debian repository (_unstable_ for the moment, _Jessie_ soon).\r\nYou can look at status at: https://packages.debian.org/search?lang=fr&searchon=names&keywords=cassiopee\r\n\r\nFor rpm (Fedora, CentOS, OpenSuse): https://build.opensuse.org/package/show/home:osallou:logol/cassiopee-c\r\n\r\nCompilation dependencies\r\n===========\r\n\r\n* cppunit\r\n* Google log (glog)\r\n* tree.hh (included):\r\n  - Author: kasper.peeters (at) phi-sci.com\r\n  - http://tree.phi-sci.com/ under GNU GPL\r\n* libboost-serialization-dev,libboost-iostreams-dev\r\n\r\nRuntime dependencies\r\n===================\r\n\r\n* Google log (glog)\r\n\r\n* libboost-serialization, libboost-iostreams\r\n\r\nCompilation\r\n===========\r\n\r\n    cmake -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_BUILD_TYPE=Debug .\r\n    make\r\n\r\nValgrind\r\n=======\r\n\r\n    valgrind --leak-check=full bin/Cassiopee  -s test/sequence.txt -p ggc\r\n\r\nStatic analysis\r\n==============\r\n\r\n    CXX=/usr/share/clang/scan-build/c++-analyzer cmake .\r\n\r\nTests\r\n=====\r\n\r\n    bin/test_cassiopee\r\n\r\nor \r\n\r\n    cd test; ctest -V\r\n\r\nTree graph generation\r\n=====================\r\n\r\nAPI provides the graph method to generate a cassiopee.dot file.\r\nTo generate the image from the file:\r\n\r\n    dot -Tpng cassiopee.dot > cassiopee.png\r\n\r\nDocumentation\r\n============\r\n\r\ndoxygen bin/Doxyfile\r\n\r\nBUGS\r\n====\r\n\r\n\r\nCassiopeeKnife\r\n=============\r\n\r\nConvert an input Fasta sequence in a cassiopee input format (one line sequence\r\nwith no header).\r\n\r\n\r\n\r\nTODO\r\n====\r\n\r\n\r\nCOPYRIGHT\r\n========\r\n\r\nSee license file.\r\n\r\nCode under src/tree from http://tree.phi-sci.com/, copyright kasper.peeters@phi-sci.com","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}